/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */
/*!
 * Bootstrap v3.4.1 (https://getbootstrap.com/)
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under the MIT license
 */
if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,(function(t,e){var n=[],i=t.document,o=n.slice,r=n.concat,s=n.push,a=n.indexOf,l={},u=l.toString,c=l.hasOwnProperty,f={},p="2.2.4",d=function(t,e){return new d.fn.init(t,e)},h=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,g=/^-ms-/,m=/-([\da-z])/gi,v=function(t,e){return e.toUpperCase()};function y(t){var e=!!t&&"length"in t&&t.length,n=d.type(t);return"function"!==n&&!d.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}d.fn=d.prototype={jquery:p,constructor:d,selector:"",length:0,toArray:function(){return o.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:o.call(this)},pushStack:function(t){var e=d.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return d.each(this,t)},map:function(t){return this.pushStack(d.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},d.extend=d.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||d.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(u&&i&&(d.isPlainObject(i)||(o=d.isArray(i)))?(o?(o=!1,r=n&&d.isArray(n)?n:[]):r=n&&d.isPlainObject(n)?n:{},s[e]=d.extend(u,r,i)):void 0!==i&&(s[e]=i));return s},d.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===d.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!d.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==d.type(t)||t.nodeType||d.isWindow(t))return!1;if(t.constructor&&!c.call(t,"constructor")&&!c.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||c.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[u.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;(t=d.trim(t))&&(1===t.indexOf("use strict")?((e=i.createElement("script")).text=t,i.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(g,"ms-").replace(m,v)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,i=0;if(y(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(h,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(y(Object(t))?d.merge(n,"string"==typeof t?[t]:t):s.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:a.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,s=0,a=[];if(y(t))for(i=t.length;s<i;s++)null!=(o=e(t[s],s,n))&&a.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&a.push(o);return r.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),d.isFunction(t))return i=o.call(arguments,2),r=function(){return t.apply(e||this,i.concat(o.call(arguments)))},r.guid=t.guid=t.guid||d.guid++,r},now:Date.now,support:f}),"function"==typeof Symbol&&(d.fn[Symbol.iterator]=n[Symbol.iterator]),d.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var b=
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
function(t){var e,n,i,o,r,s,a,l,u,c,f,p,d,h,g,m,v,y,b,x="sizzle"+1*new Date,w=t.document,T=0,C=0,k=rt(),E=rt(),S=rt(),$=function(t,e){return t===e&&(f=!0),0},N=1<<31,D={}.hasOwnProperty,A=[],j=A.pop,O=A.push,L=A.push,I=A.slice,R=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",F="\\[[\\x20\\t\\r\\n\\f]*("+H+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+P+"*\\]",M=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",_=new RegExp(P+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),B=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),U=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),z=new RegExp("=[\\x20\\t\\r\\n\\f]*([^\\]'\"]*?)[\\x20\\t\\r\\n\\f]*\\]","g"),V=new RegExp(M),X=new RegExp("^"+H+"$"),Q={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+q+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,tt=/'|\\/g,et=new RegExp("\\\\([\\da-f]{1,6}[\\x20\\t\\r\\n\\f]?|([\\x20\\t\\r\\n\\f])|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=function(){p()};try{L.apply(A=I.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(t){L={apply:A.length?function(t,e){O.apply(t,I.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function ot(t,e,i,o){var r,a,u,c,f,h,v,y,T=e&&e.ownerDocument,C=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return i;if(!o&&((e?e.ownerDocument||e:w)!==d&&p(e),e=e||d,g)){if(11!==C&&(h=J.exec(t)))if(r=h[1]){if(9===C){if(!(u=e.getElementById(r)))return i;if(u.id===r)return i.push(u),i}else if(T&&(u=T.getElementById(r))&&b(e,u)&&u.id===r)return i.push(u),i}else{if(h[2])return L.apply(i,e.getElementsByTagName(t)),i;if((r=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return L.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!S[t+" "]&&(!m||!m.test(t))){if(1!==C)T=e,y=t;else if("object"!==e.nodeName.toLowerCase()){for((c=e.getAttribute("id"))?c=c.replace(tt,"\\$&"):e.setAttribute("id",c=x),a=(v=s(t)).length,f=X.test(c)?"#"+c:"[id='"+c+"']";a--;)v[a]=f+" "+gt(v[a]);y=v.join(","),T=Z.test(t)&&dt(e.parentNode)||e}if(y)try{return L.apply(i,T.querySelectorAll(y)),i}catch(t){}finally{c===x&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,i,o)}function rt(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function st(t){return t[x]=!0,t}function at(t){var e=d.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function lt(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function ut(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||N)-(~t.sourceIndex||N);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ct(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function pt(t){return st((function(e){return e=+e,st((function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function dt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ot.support={},r=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},p=ot.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:w;return s!==d&&9===s.nodeType&&s.documentElement?(h=(d=s).documentElement,g=!r(d),(o=d.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",it,!1):o.attachEvent&&o.attachEvent("onunload",it)),n.attributes=at((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=at((function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=G.test(d.getElementsByClassName),n.getById=at((function(t){return h.appendChild(t).id=x,!d.getElementsByName||!d.getElementsByName(x).length})),n.getById?(i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}},i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}}):(delete i.find.ID,i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=G.test(d.querySelectorAll))&&(at((function(t){h.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+q+")"),t.querySelectorAll("[id~="+x+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")})),at((function(t){var e=d.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),t.querySelectorAll(":enabled").length||m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=G.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&at((function(t){n.disconnectedMatch=y.call(t,"div"),y.call(t,"[s!='']:x"),v.push("!=",M)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=G.test(h.compareDocumentPosition),b=e||G.test(h.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},$=e?function(t,e){if(t===e)return f=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===d||t.ownerDocument===w&&b(w,t)?-1:e===d||e.ownerDocument===w&&b(w,e)?1:c?R(c,t)-R(c,e):0:4&i?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t===d?-1:e===d?1:o?-1:r?1:c?R(c,t)-R(c,e):0;if(o===r)return ut(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ut(s[i],a[i]):s[i]===w?-1:a[i]===w?1:0},d):d},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==d&&p(t),e=e.replace(z,"='$1']"),n.matchesSelector&&g&&!S[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return ot(e,d,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!==d&&p(t),b(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==d&&p(t);var o=i.attrHandle[e.toLowerCase()],r=o&&D.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,i=[],o=0,r=0;if(f=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort($),f){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return c=null,t},o=ot.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},i=ot.selectors={cacheLength:50,createPseudo:st,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return Q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=k[t+" "];return e||(e=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+t+"("+P+"|$)"))&&k(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var o=ot.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(_," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,p,d,h,g=r!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(p=e;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(b=(d=(u=(c=(f=(p=m)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[t]||[])[0]===T&&u[1])&&u[2],p=d&&m.childNodes[d];p=++d&&p&&p[g]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===e){c[t]=[T,d,b];break}}else if(y&&(b=d=(u=(c=(f=(p=e)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[t]||[])[0]===T&&u[1]),!1===b)for(;(p=++d&&p&&p[g]||(b=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(f=p[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[t]=[T,b]),p!==e)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return o[x]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?st((function(t,n){for(var i,r=o(t,e),s=r.length;s--;)t[i=R(t,r[s])]=!(n[i]=r[s])})):function(t){return o(t,0,n)}):o}},pseudos:{not:st((function(t){var e=[],n=[],i=a(t.replace(W,"$1"));return i[x]?st((function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))})):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}})),has:st((function(t){return function(e){return ot(t,e).length>0}})),contains:st((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||e.innerText||o(e)).indexOf(t)>-1}})),lang:st((function(t){return X.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===h},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt((function(){return[0]})),last:pt((function(t,e){return[e-1]})),eq:pt((function(t,e,n){return[n<0?n+e:n]})),even:pt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:pt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:pt((function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t})),gt:pt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ct(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ft(e);function ht(){}function gt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function mt(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=C++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,s){var a,l,u,c=[T,r];if(s){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if((a=(l=(u=e[x]||(e[x]={}))[e.uniqueID]||(u[e.uniqueID]={}))[i])&&a[0]===T&&a[1]===r)return c[2]=a[2];if(l[i]=c,c[2]=t(e,n,s))return!0}}}function vt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function yt(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),u&&e.push(a)));return s}function bt(t,e,n,i,o,r){return i&&!i[x]&&(i=bt(i)),o&&!o[x]&&(o=bt(o,r)),st((function(r,s,a,l){var u,c,f,p=[],d=[],h=s.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)ot(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!r&&e?g:yt(g,p,t,a,l),v=n?o||(r?t:h||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(u=yt(v,d),i(u,[],a,l),c=u.length;c--;)(f=u[c])&&(v[d[c]]=!(m[d[c]]=f));if(r){if(o||t){if(o){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);o(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=o?R(r,f):p[c])>-1&&(r[u]=!(s[u]=f))}}else v=yt(v===s?v.splice(h,v.length):v),o?o(null,s,v,l):L.apply(s,v)}))}function xt(t){for(var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,c=mt((function(t){return t===e}),a,!0),f=mt((function(t){return R(e,t)>-1}),a,!0),p=[function(t,n,i){var o=!s&&(i||n!==u)||((e=n).nodeType?c(t,n,i):f(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])p=[mt(vt(p),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[x]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return bt(l>1&&vt(p),l>1&&gt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&xt(t.slice(l,o)),o<r&&xt(t=t.slice(o)),o<r&&gt(t))}p.push(n)}return vt(p)}return ht.prototype=i.filters=i.pseudos,i.setFilters=new ht,s=ot.tokenize=function(t,e){var n,o,r,s,a,l,u,c=E[t+" "];if(c)return e?0:c.slice(0);for(a=t,l=[],u=i.preFilter;a;){for(s in n&&!(o=B.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=U.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=Q[s].exec(a))||u[s]&&!(o=u[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?ot.error(t):E(t,l).slice(0)},a=ot.compile=function(t,e){var n,o=[],r=[],a=S[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=xt(e[n]))[x]?o.push(a):r.push(a);a=S(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,c){var f,h,m,v=0,y="0",b=r&&[],x=[],w=u,C=r||o&&i.find.TAG("*",c),k=T+=null==w?1:Math.random()||.1,E=C.length;for(c&&(u=s===d||s||c);y!==E&&null!=(f=C[y]);y++){if(o&&f){for(h=0,s||f.ownerDocument===d||(p(f),a=!g);m=t[h++];)if(m(f,s||d,a)){l.push(f);break}c&&(T=k)}n&&((f=!m&&f)&&v--,r&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;m=e[h++];)m(b,x,s,a);if(r){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=j.call(l));x=yt(x)}L.apply(l,x),c&&!r&&x.length>0&&v+e.length>1&&ot.uniqueSort(l)}return c&&(T=k,u=w),b};return n?st(r):r}(r,o)),a.selector=t}return a},l=ot.select=function(t,e,o,r){var l,u,c,f,p,d="function"==typeof t&&t,h=!r&&s(t=d.selector||t);if(o=o||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&n.getById&&9===e.nodeType&&g&&i.relative[u[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return o;d&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(l=Q.needsContext.test(t)?0:u.length;l--&&(c=u[l],!i.relative[f=c.type]);)if((p=i.find[f])&&(r=p(c.matches[0].replace(et,nt),Z.test(u[0].type)&&dt(e.parentNode)||e))){if(u.splice(l,1),!(t=r.length&&gt(u)))return L.apply(o,r),o;break}}return(d||a(t,h))(r,e,!g,o,!e||Z.test(t)&&dt(e.parentNode)||e),o},n.sortStable=x.split("").sort($).join("")===x,n.detectDuplicates=!!f,p(),n.sortDetached=at((function(t){return 1&t.compareDocumentPosition(d.createElement("div"))})),at((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||lt("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&at((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||lt("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),at((function(t){return null==t.getAttribute("disabled")}))||lt(q,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),ot}(t);d.find=b,d.expr=b.selectors,d.expr[":"]=d.expr.pseudos,d.uniqueSort=d.unique=b.uniqueSort,d.text=b.getText,d.isXMLDoc=b.isXML,d.contains=b.contains;var x=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&d(t).is(n))break;i.push(t)}return i},w=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},T=d.expr.match.needsContext,C=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,k=/^.[^:#\[\.,]*$/;function E(t,e,n){if(d.isFunction(e))return d.grep(t,(function(t,i){return!!e.call(t,i,t)!==n}));if(e.nodeType)return d.grep(t,(function(t){return t===e!==n}));if("string"==typeof e){if(k.test(e))return d.filter(e,t,n);e=d.filter(e,t)}return d.grep(t,(function(t){return a.call(e,t)>-1!==n}))}d.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?d.find.matchesSelector(i,t)?[i]:[]:d.find.matches(t,d.grep(e,(function(t){return 1===t.nodeType})))},d.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(d(t).filter((function(){for(e=0;e<n;e++)if(d.contains(o[e],this))return!0})));for(e=0;e<n;e++)d.find(t,o[e],i);return(i=this.pushStack(n>1?d.unique(i):i)).selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(E(this,t||[],!1))},not:function(t){return this.pushStack(E(this,t||[],!0))},is:function(t){return!!E(this,"string"==typeof t&&T.test(t)?d(t):t||[],!1).length}});var S,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(d.fn.init=function(t,e,n){var o,r;if(!t)return this;if(n=n||S,"string"==typeof t){if(!(o="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:$.exec(t))||!o[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof d?e[0]:e,d.merge(this,d.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:i,!0)),C.test(o[1])&&d.isPlainObject(e))for(o in e)d.isFunction(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(r=i.getElementById(o[2]))&&r.parentNode&&(this.length=1,this[0]=r),this.context=i,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):d.isFunction(t)?void 0!==n.ready?n.ready(t):t(d):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),d.makeArray(t,this))}).prototype=d.fn,S=d(i);var N=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function A(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}d.fn.extend({has:function(t){var e=d(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(d.contains(this,e[t]))return!0}))},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=T.test(t)||"string"!=typeof t?d(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&d.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?d.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?a.call(d(t),this[0]):a.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(d.uniqueSort(d.merge(this.get(),d(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),d.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return x(t,"parentNode")},parentsUntil:function(t,e,n){return x(t,"parentNode",n)},next:function(t){return A(t,"nextSibling")},prev:function(t){return A(t,"previousSibling")},nextAll:function(t){return x(t,"nextSibling")},prevAll:function(t){return x(t,"previousSibling")},nextUntil:function(t,e,n){return x(t,"nextSibling",n)},prevUntil:function(t,e,n){return x(t,"previousSibling",n)},siblings:function(t){return w((t.parentNode||{}).firstChild,t)},children:function(t){return w(t.firstChild)},contents:function(t){return t.contentDocument||d.merge([],t.childNodes)}},(function(t,e){d.fn[t]=function(n,i){var o=d.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=d.filter(i,o)),this.length>1&&(D[t]||d.uniqueSort(o),N.test(t)&&o.reverse()),this.pushStack(o)}}));var j,O=/\S+/g;function L(){i.removeEventListener("DOMContentLoaded",L),t.removeEventListener("load",L),d.ready()}d.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return d.each(t.match(O)||[],(function(t,n){e[n]=!0})),e}(t):d.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){d.each(n,(function(n,i){d.isFunction(i)?t.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==d.type(i)&&e(i)}))}(arguments),n&&!e&&l()),this},remove:function(){return d.each(arguments,(function(t,e){for(var n;(n=d.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(t){return t?d.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},d.extend({Deferred:function(t){var e=[["resolve","done",d.Callbacks("once memory"),"resolved"],["reject","fail",d.Callbacks("once memory"),"rejected"],["notify","progress",d.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return d.Deferred((function(n){d.each(e,(function(e,r){var s=d.isFunction(t[e])&&t[e];o[r[1]]((function(){var t=s&&s.apply(this,arguments);t&&d.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,s?[t]:arguments)}))})),t=null})).promise()},promise:function(t){return null!=t?d.extend(t,i):i}},o={};return i.pipe=i.then,d.each(e,(function(t,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add((function(){n=a}),e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,r=0,s=o.call(arguments),a=s.length,l=1!==a||t&&d.isFunction(t.promise)?a:0,u=1===l?t:d.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?o.call(arguments):r,i===e?u.notifyWith(n,i):--l||u.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);r<a;r++)s[r]&&d.isFunction(s[r].promise)?s[r].promise().progress(c(r,n,e)).done(c(r,i,s)).fail(u.reject):--l;return l||u.resolveWith(i,s),u.promise()}}),d.fn.ready=function(t){return d.ready.promise().done(t),this},d.extend({isReady:!1,readyWait:1,holdReady:function(t){t?d.readyWait++:d.ready(!0)},ready:function(t){(!0===t?--d.readyWait:d.isReady)||(d.isReady=!0,!0!==t&&--d.readyWait>0||(j.resolveWith(i,[d]),d.fn.triggerHandler&&(d(i).triggerHandler("ready"),d(i).off("ready"))))}}),d.ready.promise=function(e){return j||(j=d.Deferred(),"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?t.setTimeout(d.ready):(i.addEventListener("DOMContentLoaded",L),t.addEventListener("load",L))),j.promise(e)},d.ready.promise();var I=function(t,e,n,i,o,r,s){var a=0,l=t.length,u=null==n;if("object"===d.type(n))for(a in o=!0,n)I(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,d.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(d(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:u?e.call(t):l?e(t[0],n):r},R=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function q(){this.expando=d.expando+q.uid++}q.uid=1,q.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!R(t))return{};var e=t[this.expando];return e||(e={},R(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[e]=n;else for(i in e)o[i]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?void 0!==(i=this.get(t,e))?i:this.get(t,d.camelCase(e)):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=t[this.expando];if(void 0!==r){if(void 0===e)this.register(t);else{d.isArray(e)?i=e.concat(e.map(d.camelCase)):(o=d.camelCase(e),i=e in r?[e,o]:(i=o)in r?[i]:i.match(O)||[]),n=i.length;for(;n--;)delete r[i[n]]}(void 0===e||d.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!d.isEmptyObject(e)}};var P=new q,H=new q,F=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,M=/[A-Z]/g;function _(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(M,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:F.test(n)?d.parseJSON(n):n)}catch(t){}H.set(t,e,n)}else n=void 0;return n}d.extend({hasData:function(t){return H.hasData(t)||P.hasData(t)},data:function(t,e,n){return H.access(t,e,n)},removeData:function(t,e){H.remove(t,e)},_data:function(t,e,n){return P.access(t,e,n)},_removeData:function(t,e){P.remove(t,e)}}),d.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=H.get(r),1===r.nodeType&&!P.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=d.camelCase(i.slice(5)),_(r,i,o[i]));P.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each((function(){H.set(this,t)})):I(this,(function(e){var n,i;if(r&&void 0===e)return void 0!==(n=H.get(r,t)||H.get(r,t.replace(M,"-$&").toLowerCase()))?n:(i=d.camelCase(t),void 0!==(n=H.get(r,i))||void 0!==(n=_(r,i,void 0))?n:void 0);i=d.camelCase(t),this.each((function(){var n=H.get(this,i);H.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&H.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){H.remove(this,t)}))}}),d.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=P.get(t,e),n&&(!i||d.isArray(n)?i=P.access(t,e,d.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=d.queue(t,e),i=n.length,o=n.shift(),r=d._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,(function(){d.dequeue(t,e)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return P.get(t,n)||P.access(t,n,{empty:d.Callbacks("once memory").add((function(){P.remove(t,[e+"queue",n])}))})}}),d.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?d.queue(this[0],t):void 0===e?this:this.each((function(){var n=d.queue(this,t,e);d._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&d.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){d.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=d.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=P.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var W=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,B=new RegExp("^(?:([+-])=|)("+W+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],z=function(t,e){return t=e||t,"none"===d.css(t,"display")||!d.contains(t.ownerDocument,t)};function V(t,e,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return d.css(t,e,"")},l=a(),u=n&&n[3]||(d.cssNumber[e]?"":"px"),c=(d.cssNumber[e]||"px"!==u&&+l)&&B.exec(d.css(t,e));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{c/=r=r||".5",d.style(t,e,c+u)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=o)),o}var X=/^(?:checkbox|radio)$/i,Q=/<([\w:-]+)/,K=/^$|\/(?:java|ecma)script/i,Y={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function G(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&d.nodeName(t,e)?d.merge([t],n):n}function J(t,e){for(var n=0,i=t.length;n<i;n++)P.set(t[n],"globalEval",!e||P.get(e[n],"globalEval"))}Y.optgroup=Y.option,Y.tbody=Y.tfoot=Y.colgroup=Y.caption=Y.thead,Y.th=Y.td;var Z,tt,et=/<|&#?\w+;/;function nt(t,e,n,i,o){for(var r,s,a,l,u,c,f=e.createDocumentFragment(),p=[],h=0,g=t.length;h<g;h++)if((r=t[h])||0===r)if("object"===d.type(r))d.merge(p,r.nodeType?[r]:r);else if(et.test(r)){for(s=s||f.appendChild(e.createElement("div")),a=(Q.exec(r)||["",""])[1].toLowerCase(),l=Y[a]||Y._default,s.innerHTML=l[1]+d.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;d.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(e.createTextNode(r));for(f.textContent="",h=0;r=p[h++];)if(i&&d.inArray(r,i)>-1)o&&o.push(r);else if(u=d.contains(r.ownerDocument,r),s=G(f.appendChild(r),"script"),u&&J(s),n)for(c=0;r=s[c++];)K.test(r.type||"")&&n.push(r);return f}Z=i.createDocumentFragment().appendChild(i.createElement("div")),(tt=i.createElement("input")).setAttribute("type","radio"),tt.setAttribute("checked","checked"),tt.setAttribute("name","t"),Z.appendChild(tt),f.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var it=/^key/,ot=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rt=/^([^.]*)(?:\.(.+)|)/;function st(){return!0}function at(){return!1}function lt(){try{return i.activeElement}catch(t){}}function ut(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)ut(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=at;else if(!o)return t;return 1===r&&(s=o,o=function(t){return d().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=d.guid++)),t.each((function(){d.event.add(this,e,o,i,n)}))}d.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,u,c,f,p,h,g,m,v=P.get(t);if(v)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=d.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==d&&d.event.triggered!==e.type?d.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(O)||[""]).length;u--;)h=m=(a=rt.exec(e[u])||[])[1],g=(a[2]||"").split(".").sort(),h&&(f=d.event.special[h]||{},h=(o?f.delegateType:f.bindType)||h,f=d.event.special[h]||{},c=d.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&d.expr.match.needsContext.test(o),namespace:g.join(".")},r),(p=l[h])||((p=l[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,i,g,s)||t.addEventListener&&t.addEventListener(h,s)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),d.event.global[h]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,u,c,f,p,h,g,m,v=P.hasData(t)&&P.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(O)||[""]).length;u--;)if(h=m=(a=rt.exec(e[u])||[])[1],g=(a[2]||"").split(".").sort(),h){for(f=d.event.special[h]||{},p=l[h=(i?f.delegateType:f.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!o&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(t,c));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(t,g,v.handle)||d.removeEvent(t,h,v.handle),delete l[h])}else for(h in l)d.event.remove(t,h+e[u],n,i,!0);d.isEmptyObject(l)&&P.remove(t,"handle events")}},dispatch:function(t){t=d.event.fix(t);var e,n,i,r,s,a=[],l=o.call(arguments),u=(P.get(this,"events")||{})[t.type]||[],c=d.event.special[t.type]||{};if(l[0]=t,t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(a=d.event.handlers.call(this,t,u),e=0;(r=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(s.namespace)||(t.handleObj=s,t.data=s.data,void 0!==(i=((d.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<a;n++)void 0===i[o=(r=e[n]).selector+" "]&&(i[o]=r.needsContext?d(o,this).index(l)>-1:d.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,o,r,s=e.button;return null==t.pageX&&null!=e.clientX&&(o=(n=t.target.ownerDocument||i).documentElement,r=n.body,t.pageX=e.clientX+(o&&o.scrollLeft||r&&r.scrollLeft||0)-(o&&o.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(o&&o.scrollTop||r&&r.scrollTop||0)-(o&&o.clientTop||r&&r.clientTop||0)),t.which||void 0===s||(t.which=1&s?1:2&s?3:4&s?2:0),t}},fix:function(t){if(t[d.expando])return t;var e,n,o,r=t.type,s=t,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=ot.test(r)?this.mouseHooks:it.test(r)?this.keyHooks:{}),o=a.props?this.props.concat(a.props):this.props,t=new d.Event(s),e=o.length;e--;)t[n=o[e]]=s[n];return t.target||(t.target=i),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,s):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==lt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===lt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&d.nodeName(this,"input"))return this.click(),!1},_default:function(t){return d.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},d.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},d.Event=function(t,e){if(!(this instanceof d.Event))return new d.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?st:at):this.type=t,e&&d.extend(this,e),this.timeStamp=t&&t.timeStamp||d.now(),this[d.expando]=!0},d.Event.prototype={constructor:d.Event,isDefaultPrevented:at,isPropagationStopped:at,isImmediatePropagationStopped:at,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=st,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=st,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=st,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},d.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){d.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||d.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}})),d.fn.extend({on:function(t,e,n,i){return ut(this,t,e,n,i)},one:function(t,e,n,i){return ut(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,d(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=at),this.each((function(){d.event.remove(this,t,n,e)}))}});var ct=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ft=/<script|<style|<link/i,pt=/checked\s*(?:[^=]|=\s*.checked.)/i,dt=/^true\/(.*)/,ht=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function gt(t,e){return d.nodeName(t,"table")&&d.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function vt(t){var e=dt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function yt(t,e){var n,i,o,r,s,a,l,u;if(1===e.nodeType){if(P.hasData(t)&&(r=P.access(t),s=P.set(e,r),u=r.events))for(o in delete s.handle,s.events={},u)for(n=0,i=u[o].length;n<i;n++)d.event.add(e,o,u[o][n]);H.hasData(t)&&(a=H.access(t),l=d.extend({},a),H.set(e,l))}}function bt(t,e,n,i){e=r.apply([],e);var o,s,a,l,u,c,p=0,h=t.length,g=h-1,m=e[0],v=d.isFunction(m);if(v||h>1&&"string"==typeof m&&!f.checkClone&&pt.test(m))return t.each((function(o){var r=t.eq(o);v&&(e[0]=m.call(this,o,r.html())),bt(r,e,n,i)}));if(h&&(s=(o=nt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=s),s||i)){for(l=(a=d.map(G(o,"script"),mt)).length;p<h;p++)u=o,p!==g&&(u=d.clone(u,!0,!0),l&&d.merge(a,G(u,"script"))),n.call(t[p],u,p);if(l)for(c=a[a.length-1].ownerDocument,d.map(a,vt),p=0;p<l;p++)u=a[p],K.test(u.type||"")&&!P.access(u,"globalEval")&&d.contains(c,u)&&(u.src?d._evalUrl&&d._evalUrl(u.src):d.globalEval(u.textContent.replace(ht,"")))}return t}function xt(t,e,n){for(var i,o=e?d.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||d.cleanData(G(i)),i.parentNode&&(n&&d.contains(i.ownerDocument,i)&&J(G(i,"script")),i.parentNode.removeChild(i));return t}d.extend({htmlPrefilter:function(t){return t.replace(ct,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a,l,u,c=t.cloneNode(!0),p=d.contains(t.ownerDocument,t);if(!(f.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||d.isXMLDoc(t)))for(s=G(c),i=0,o=(r=G(t)).length;i<o;i++)a=r[i],l=s[i],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&X.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(e)if(n)for(r=r||G(t),s=s||G(c),i=0,o=r.length;i<o;i++)yt(r[i],s[i]);else yt(t,c);return(s=G(c,"script")).length>0&&J(s,!p&&G(t,"script")),c},cleanData:function(t){for(var e,n,i,o=d.event.special,r=0;void 0!==(n=t[r]);r++)if(R(n)){if(e=n[P.expando]){if(e.events)for(i in e.events)o[i]?d.event.remove(n,i):d.removeEvent(n,i,e.handle);n[P.expando]=void 0}n[H.expando]&&(n[H.expando]=void 0)}}}),d.fn.extend({domManip:bt,detach:function(t){return xt(this,t,!0)},remove:function(t){return xt(this,t)},text:function(t){return I(this,(function(t){return void 0===t?d.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return bt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||gt(this,t).appendChild(t)}))},prepend:function(){return bt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=gt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(d.cleanData(G(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return d.clone(this,t,e)}))},html:function(t){return I(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ft.test(t)&&!Y[(Q.exec(t)||["",""])[1].toLowerCase()]){t=d.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(d.cleanData(G(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return bt(this,arguments,(function(e){var n=this.parentNode;d.inArray(this,t)<0&&(d.cleanData(G(this)),n&&n.replaceChild(e,this))}),t)}}),d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){d.fn[t]=function(t){for(var n,i=[],o=d(t),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),d(o[a])[e](n),s.apply(i,n.get());return this.pushStack(i)}}));var wt,Tt={HTML:"block",BODY:"block"};function Ct(t,e){var n=d(e.createElement(t)).appendTo(e.body),i=d.css(n[0],"display");return n.detach(),i}function kt(t){var e=i,n=Tt[t];return n||("none"!==(n=Ct(t,e))&&n||((e=(wt=(wt||d("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentDocument).write(),e.close(),n=Ct(t,e),wt.detach()),Tt[t]=n),n}var Et=/^margin/,St=new RegExp("^("+W+")(?!px)[a-z%]+$","i"),$t=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Nt=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];for(r in o=n.apply(t,i||[]),e)t.style[r]=s[r];return o},Dt=i.documentElement;function At(t,e,n){var i,o,r,s,a=t.style;return""!==(s=(n=n||$t(t))?n.getPropertyValue(e)||n[e]:void 0)&&void 0!==s||d.contains(t.ownerDocument,t)||(s=d.style(t,e)),n&&!f.pixelMarginRight()&&St.test(s)&&Et.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0!==s?s+"":s}function jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){var e,n,o,r,s=i.createElement("div"),a=i.createElement("div");function l(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Dt.appendChild(s);var i=t.getComputedStyle(a);e="1%"!==i.top,r="2px"===i.marginLeft,n="4px"===i.width,a.style.marginRight="50%",o="4px"===i.marginRight,Dt.removeChild(s)}a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),d.extend(f,{pixelPosition:function(){return l(),e},boxSizingReliable:function(){return null==n&&l(),n},pixelMarginRight:function(){return null==n&&l(),o},reliableMarginLeft:function(){return null==n&&l(),r},reliableMarginRight:function(){var e,n=a.appendChild(i.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Dt.appendChild(s),e=!parseFloat(t.getComputedStyle(n).marginRight),Dt.removeChild(s),a.removeChild(n),e}}))}();var Ot=/^(none|table(?!-c[ea]).+)/,Lt={position:"absolute",visibility:"hidden",display:"block"},It={letterSpacing:"0",fontWeight:"400"},Rt=["Webkit","O","Moz","ms"],qt=i.createElement("div").style;function Pt(t){if(t in qt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Rt.length;n--;)if((t=Rt[n]+e)in qt)return t}function Ht(t,e,n){var i=B.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Ft(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=d.css(t,n+U[r],!0,o)),i?("content"===n&&(s-=d.css(t,"padding"+U[r],!0,o)),"margin"!==n&&(s-=d.css(t,"border"+U[r]+"Width",!0,o))):(s+=d.css(t,"padding"+U[r],!0,o),"padding"!==n&&(s+=d.css(t,"border"+U[r]+"Width",!0,o)));return s}function Mt(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=$t(t),s="border-box"===d.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(((o=At(t,e,r))<0||null==o)&&(o=t.style[e]),St.test(o))return o;i=s&&(f.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+Ft(t,e,n||(s?"border":"content"),i,r)+"px"}function _t(t,e){for(var n,i,o,r=[],s=0,a=t.length;s<a;s++)(i=t[s]).style&&(r[s]=P.get(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&z(i)&&(r[s]=P.access(i,"olddisplay",kt(i.nodeName)))):(o=z(i),"none"===n&&o||P.set(i,"olddisplay",o?n:d.css(i,"display"))));for(s=0;s<a;s++)(i=t[s]).style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function Wt(t,e,n,i,o){return new Wt.prototype.init(t,e,n,i,o)}d.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=At(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=d.camelCase(e),l=t.style;if(e=d.cssProps[a]||(d.cssProps[a]=Pt(a)||a),s=d.cssHooks[e]||d.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:l[e];"string"===(r=typeof n)&&(o=B.exec(n))&&o[1]&&(n=V(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(d.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n))}},css:function(t,e,n,i){var o,r,s,a=d.camelCase(e);return e=d.cssProps[a]||(d.cssProps[a]=Pt(a)||a),(s=d.cssHooks[e]||d.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=At(t,e,i)),"normal"===o&&e in It&&(o=It[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),d.each(["height","width"],(function(t,e){d.cssHooks[e]={get:function(t,n,i){if(n)return Ot.test(d.css(t,"display"))&&0===t.offsetWidth?Nt(t,Lt,(function(){return Mt(t,e,i)})):Mt(t,e,i)},set:function(t,n,i){var o,r=i&&$t(t),s=i&&Ft(t,e,i,"border-box"===d.css(t,"boxSizing",!1,r),r);return s&&(o=B.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=d.css(t,e)),Ht(0,n,s)}}})),d.cssHooks.marginLeft=jt(f.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(At(t,"marginLeft"))||t.getBoundingClientRect().left-Nt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),d.cssHooks.marginRight=jt(f.reliableMarginRight,(function(t,e){if(e)return Nt(t,{display:"inline-block"},At,[t,"marginRight"])})),d.each({margin:"",padding:"",border:"Width"},(function(t,e){d.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+U[i]+e]=r[i]||r[i-2]||r[0];return o}},Et.test(t)||(d.cssHooks[t+e].set=Ht)})),d.fn.extend({css:function(t,e){return I(this,(function(t,e,n){var i,o,r={},s=0;if(d.isArray(e)){for(i=$t(t),o=e.length;s<o;s++)r[e[s]]=d.css(t,e[s],!1,i);return r}return void 0!==n?d.style(t,e,n):d.css(t,e)}),t,e,arguments.length>1)},show:function(){return _t(this,!0)},hide:function(){return _t(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){z(this)?d(this).show():d(this).hide()}))}}),d.Tween=Wt,Wt.prototype={constructor:Wt,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||d.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(d.cssNumber[n]?"":"px")},cur:function(){var t=Wt.propHooks[this.prop];return t&&t.get?t.get(this):Wt.propHooks._default.get(this)},run:function(t){var e,n=Wt.propHooks[this.prop];return this.options.duration?this.pos=e=d.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Wt.propHooks._default.set(this),this}},Wt.prototype.init.prototype=Wt.prototype,Wt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=d.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){d.fx.step[t.prop]?d.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[d.cssProps[t.prop]]&&!d.cssHooks[t.prop]?t.elem[t.prop]=t.now:d.style(t.elem,t.prop,t.now+t.unit)}}},Wt.propHooks.scrollTop=Wt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},d.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},d.fx=Wt.prototype.init,d.fx.step={};var Bt,Ut,zt=/^(?:toggle|show|hide)$/,Vt=/queueHooks$/;function Xt(){return t.setTimeout((function(){Bt=void 0})),Bt=d.now()}function Qt(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=U[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function Kt(t,e,n){for(var i,o=(Yt.tweeners[e]||[]).concat(Yt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function Yt(t,e,n){var i,o,r=0,s=Yt.prefilters.length,a=d.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var e=Bt||Xt(),n=Math.max(0,u.startTime+u.duration-e),i=1-(n/u.duration||0),r=0,s=u.tweens.length;r<s;r++)u.tweens[r].run(i);return a.notifyWith(t,[u,i,n]),i<1&&s?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:d.extend({},e),opts:d.extend(!0,{specialEasing:{},easing:d.easing._default},n),originalProperties:e,originalOptions:n,startTime:Bt||Xt(),duration:n.duration,tweens:[],createTween:function(e,n){var i=d.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=d.camelCase(n)],r=t[n],d.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=d.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(c,u.opts.specialEasing);r<s;r++)if(i=Yt.prefilters[r].call(u,t,c,u.opts))return d.isFunction(i.stop)&&(d._queueHooks(u.elem,u.opts.queue).stop=d.proxy(i.stop,i)),i;return d.map(c,Kt,u),d.isFunction(u.opts.start)&&u.opts.start.call(t,u),d.fx.timer(d.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}d.Animation=d.extend(Yt,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return V(n.elem,t,B.exec(e),n),n}]},tweener:function(t,e){d.isFunction(t)?(e=t,t=["*"]):t=t.match(O);for(var n,i=0,o=t.length;i<o;i++)n=t[i],Yt.tweeners[n]=Yt.tweeners[n]||[],Yt.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,u,c=this,f={},p=t.style,h=t.nodeType&&z(t),g=P.get(t,"fxshow");for(i in n.queue||(null==(a=d._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always((function(){c.always((function(){a.unqueued--,d.queue(t,"fx").length||a.empty.fire()}))}))),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(u=d.css(t,"display"))?P.get(t,"olddisplay")||kt(t.nodeName):u)&&"none"===d.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",c.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),e)if(o=e[i],zt.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}f[i]=g&&g[i]||d.style(t,i)}else u=void 0;if(d.isEmptyObject(f))"inline"===("none"===u?kt(t.nodeName):u)&&(p.display=u);else for(i in g?"hidden"in g&&(h=g.hidden):g=P.access(t,"fxshow",{}),r&&(g.hidden=!h),h?d(t).show():c.done((function(){d(t).hide()})),c.done((function(){var e;for(e in P.remove(t,"fxshow"),f)d.style(t,e,f[e])})),f)s=Kt(h?g[i]:0,i,c),i in g||(g[i]=s.start,h&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(t,e){e?Yt.prefilters.unshift(t):Yt.prefilters.push(t)}}),d.speed=function(t,e,n){var i=t&&"object"==typeof t?d.extend({},t):{complete:n||!n&&e||d.isFunction(t)&&t,duration:t,easing:n&&e||e&&!d.isFunction(e)&&e};return i.duration=d.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in d.fx.speeds?d.fx.speeds[i.duration]:d.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){d.isFunction(i.old)&&i.old.call(this),i.queue&&d.dequeue(this,i.queue)},i},d.fn.extend({fadeTo:function(t,e,n,i){return this.filter(z).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=d.isEmptyObject(t),r=d.speed(e,n,i),s=function(){var e=Yt(this,d.extend({},t),r);(o||P.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,o=null!=t&&t+"queueHooks",r=d.timers,s=P.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&Vt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||d.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=P.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=d.timers,s=i?i.length:0;for(n.finish=!0,d.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),d.each(["toggle","show","hide"],(function(t,e){var n=d.fn[e];d.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(Qt(e,!0),t,i,o)}})),d.each({slideDown:Qt("show"),slideUp:Qt("hide"),slideToggle:Qt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){d.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),d.timers=[],d.fx.tick=function(){var t,e=0,n=d.timers;for(Bt=d.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||d.fx.stop(),Bt=void 0},d.fx.timer=function(t){d.timers.push(t),t()?d.fx.start():d.timers.pop()},d.fx.interval=13,d.fx.start=function(){Ut||(Ut=t.setInterval(d.fx.tick,d.fx.interval))},d.fx.stop=function(){t.clearInterval(Ut),Ut=null},d.fx.speeds={slow:600,fast:200,_default:400},d.fn.delay=function(e,n){return e=d.fx&&d.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}}))},function(){var t=i.createElement("input"),e=i.createElement("select"),n=e.appendChild(i.createElement("option"));t.type="checkbox",f.checkOn=""!==t.value,f.optSelected=n.selected,e.disabled=!0,f.optDisabled=!n.disabled,(t=i.createElement("input")).value="t",t.type="radio",f.radioValue="t"===t.value}();var Gt,Jt=d.expr.attrHandle;d.fn.extend({attr:function(t,e){return I(this,d.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){d.removeAttr(this,t)}))}}),d.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?d.prop(t,e,n):(1===r&&d.isXMLDoc(t)||(e=e.toLowerCase(),o=d.attrHooks[e]||(d.expr.match.bool.test(e)?Gt:void 0)),void 0!==n?null===n?void d.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=d.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!f.radioValue&&"radio"===e&&d.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(O);if(r&&1===t.nodeType)for(;n=r[o++];)i=d.propFix[n]||n,d.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),Gt={set:function(t,e,n){return!1===e?d.removeAttr(t,n):t.setAttribute(n,n),n}},d.each(d.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=Jt[e]||d.find.attr;Jt[e]=function(t,e,i){var o,r;return i||(r=Jt[e],Jt[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,Jt[e]=r),o}}));var Zt=/^(?:input|select|textarea|button)$/i,te=/^(?:a|area)$/i;d.fn.extend({prop:function(t,e){return I(this,d.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[d.propFix[t]||t]}))}}),d.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&d.isXMLDoc(t)||(e=d.propFix[e]||e,o=d.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=d.find.attr(t,"tabindex");return e?parseInt(e,10):Zt.test(t.nodeName)||te.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(d.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),d.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){d.propFix[this.toLowerCase()]=this}));var ee=/[\t\r\n\f]/g;function ne(t){return t.getAttribute&&t.getAttribute("class")||""}d.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(d.isFunction(t))return this.each((function(e){d(this).addClass(t.call(this,e,ne(this)))}));if("string"==typeof t&&t)for(e=t.match(O)||[];n=this[l++];)if(o=ne(n),i=1===n.nodeType&&(" "+o+" ").replace(ee," ")){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=d.trim(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(d.isFunction(t))return this.each((function(e){d(this).removeClass(t.call(this,e,ne(this)))}));if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(O)||[];n=this[l++];)if(o=ne(n),i=1===n.nodeType&&(" "+o+" ").replace(ee," ")){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=d.trim(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):d.isFunction(t)?this.each((function(n){d(this).toggleClass(t.call(this,n,ne(this),e),e)})):this.each((function(){var e,i,o,r;if("string"===n)for(i=0,o=d(this),r=t.match(O)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=ne(this))&&P.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":P.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ne(n)+" ").replace(ee," ").indexOf(e)>-1)return!0;return!1}});var ie=/\r/g,oe=/[\x20\t\r\n\f]+/g;d.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=d.isFunction(t),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,d(this).val()):t)?o="":"number"==typeof o?o+="":d.isArray(o)&&(o=d.map(o,(function(t){return null==t?"":t+""}))),(e=d.valHooks[this.type]||d.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))}))):o?(e=d.valHooks[o.type]||d.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(ie,""):null==n?"":n:void 0}}),d.extend({valHooks:{option:{get:function(t){var e=d.find.attr(t,"value");return null!=e?e:d.trim(d.text(t)).replace(oe," ")}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(f.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!d.nodeName(n.parentNode,"optgroup"))){if(e=d(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,r=d.makeArray(e),s=o.length;s--;)((i=o[s]).selected=d.inArray(d.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),d.each(["radio","checkbox"],(function(){d.valHooks[this]={set:function(t,e){if(d.isArray(e))return t.checked=d.inArray(d(t).val(),e)>-1}},f.checkOn||(d.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var re=/^(?:focusinfocus|focusoutblur)$/;d.extend(d.event,{trigger:function(e,n,o,r){var s,a,l,u,f,p,h,g=[o||i],m=c.call(e,"type")?e.type:e,v=c.call(e,"namespace")?e.namespace.split("."):[];if(a=l=o=o||i,3!==o.nodeType&&8!==o.nodeType&&!re.test(m+d.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),f=m.indexOf(":")<0&&"on"+m,(e=e[d.expando]?e:new d.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=o),n=null==n?[e]:d.makeArray(n,[e]),h=d.event.special[m]||{},r||!h.trigger||!1!==h.trigger.apply(o,n))){if(!r&&!h.noBubble&&!d.isWindow(o)){for(u=h.delegateType||m,re.test(u+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(o.ownerDocument||i)&&g.push(l.defaultView||l.parentWindow||t)}for(s=0;(a=g[s++])&&!e.isPropagationStopped();)e.type=s>1?u:h.bindType||m,(p=(P.get(a,"events")||{})[e.type]&&P.get(a,"handle"))&&p.apply(a,n),(p=f&&a[f])&&p.apply&&R(a)&&(e.result=p.apply(a,n),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),n)||!R(o)||f&&d.isFunction(o[m])&&!d.isWindow(o)&&((l=o[f])&&(o[f]=null),d.event.triggered=m,o[m](),d.event.triggered=void 0,l&&(o[f]=l)),e.result}},simulate:function(t,e,n){var i=d.extend(new d.Event,n,{type:t,isSimulated:!0});d.event.trigger(i,null,e)}}),d.fn.extend({trigger:function(t,e){return this.each((function(){d.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return d.event.trigger(t,e,n,!0)}}),d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),(function(t,e){d.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),d.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),f.focusin="onfocusin"in t,f.focusin||d.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){d.event.simulate(e,t.target,d.event.fix(t))};d.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=P.access(i,e);o||i.addEventListener(t,n,!0),P.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=P.access(i,e)-1;o?P.access(i,e,o):(i.removeEventListener(t,n,!0),P.remove(i,e))}}}));var se=t.location,ae=d.now(),le=/\?/;d.parseJSON=function(t){return JSON.parse(t+"")},d.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||d.error("Invalid XML: "+e),n};var ue=/#.*$/,ce=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:GET|HEAD)$/,de=/^\/\//,he={},ge={},me="*/".concat("*"),ve=i.createElement("a");function ye(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(O)||[];if(d.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function be(t,e,n,i){var o={},r=t===ge;function s(a){var l;return o[a]=!0,d.each(t[a]||[],(function(t,a){var u=a(e,n,i);return"string"!=typeof u||r||o[u]?r?!(l=u):void 0:(e.dataTypes.unshift(u),s(u),!1)})),l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function xe(t,e){var n,i,o=d.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&d.extend(!0,t,i),t}ve.href=se.href,d.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":d.parseJSON,"text xml":d.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?xe(xe(t,d.ajaxSettings),e):xe(d.ajaxSettings,t)},ajaxPrefilter:ye(he),ajaxTransport:ye(ge),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,r,s,a,l,u,c,f,p=d.ajaxSetup({},n),h=p.context||p,g=p.context&&(h.nodeType||h.jquery)?d(h):d.event,m=d.Deferred(),v=d.Callbacks("once memory"),y=p.statusCode||{},b={},x={},w=0,T="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!a)for(a={};e=fe.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=x[n]=x[n]||t,b[t]=e),this},overrideMimeType:function(t){return w||(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)y[e]=[y[e],t[e]];else C.always(t[C.status]);return this},abort:function(t){var e=t||T;return o&&o.abort(e),k(0,e),this}};if(m.promise(C).complete=v.add,C.success=C.done,C.error=C.fail,p.url=((e||p.url||se.href)+"").replace(ue,"").replace(de,se.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=d.trim(p.dataType||"*").toLowerCase().match(O)||[""],null==p.crossDomain){u=i.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=ve.protocol+"//"+ve.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=d.param(p.data,p.traditional)),be(he,p,n,C),2===w)return C;for(f in(c=d.event&&p.global)&&0==d.active++&&d.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!pe.test(p.type),r=p.url,p.hasContent||(p.data&&(r=p.url+=(le.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(p.url=ce.test(r)?r.replace(ce,"$1_="+ae++):r+(le.test(r)?"&":"?")+"_="+ae++)),p.ifModified&&(d.lastModified[r]&&C.setRequestHeader("If-Modified-Since",d.lastModified[r]),d.etag[r]&&C.setRequestHeader("If-None-Match",d.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+me+"; q=0.01":""):p.accepts["*"]),p.headers)C.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,C,p)||2===w))return C.abort();for(f in T="abort",{success:1,error:1,complete:1})C[f](p[f]);if(o=be(ge,p,n,C)){if(C.readyState=1,c&&g.trigger("ajaxSend",[C,p]),2===w)return C;p.async&&p.timeout>0&&(l=t.setTimeout((function(){C.abort("timeout")}),p.timeout));try{w=1,o.send(b,k)}catch(t){if(!(w<2))throw t;k(-1,t)}}else k(-1,"No Transport");function k(e,n,i,a){var u,f,b,x,T,k=n;2!==w&&(w=2,l&&t.clearTimeout(l),o=void 0,s=a||"",C.readyState=e>0?4:0,u=e>=200&&e<300||304===e,i&&(x=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(p,C,i)),x=function(t,e,n,i){var o,r,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(r=c.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(o in u)if((a=o.split(" "))[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(r=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(p,x,C,u),u?(p.ifModified&&((T=C.getResponseHeader("Last-Modified"))&&(d.lastModified[r]=T),(T=C.getResponseHeader("etag"))&&(d.etag[r]=T)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=x.state,f=x.data,u=!(b=x.error))):(b=k,!e&&k||(k="error",e<0&&(e=0))),C.status=e,C.statusText=(n||k)+"",u?m.resolveWith(h,[f,k,C]):m.rejectWith(h,[C,k,b]),C.statusCode(y),y=void 0,c&&g.trigger(u?"ajaxSuccess":"ajaxError",[C,p,u?f:b]),v.fireWith(h,[C,k]),c&&(g.trigger("ajaxComplete",[C,p]),--d.active||d.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return d.get(t,e,n,"json")},getScript:function(t,e){return d.get(t,void 0,e,"script")}}),d.each(["get","post"],(function(t,e){d[e]=function(t,n,i,o){return d.isFunction(n)&&(o=o||i,i=n,n=void 0),d.ajax(d.extend({url:t,type:e,dataType:o,data:n,success:i},d.isPlainObject(t)&&t))}})),d._evalUrl=function(t){return d.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},d.fn.extend({wrapAll:function(t){var e;return d.isFunction(t)?this.each((function(e){d(this).wrapAll(t.call(this,e))})):(this[0]&&(e=d(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this)},wrapInner:function(t){return d.isFunction(t)?this.each((function(e){d(this).wrapInner(t.call(this,e))})):this.each((function(){var e=d(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=d.isFunction(t);return this.each((function(n){d(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(){return this.parent().each((function(){d.nodeName(this,"body")||d(this).replaceWith(this.childNodes)})).end()}}),d.expr.filters.hidden=function(t){return!d.expr.filters.visible(t)},d.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var we=/%20/g,Te=/\[\]$/,Ce=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,Ee=/^(?:input|select|textarea|keygen)/i;function Se(t,e,n,i){var o;if(d.isArray(e))d.each(e,(function(e,o){n||Te.test(t)?i(t,o):Se(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)}));else if(n||"object"!==d.type(e))i(t,e);else for(o in e)Se(t+"["+o+"]",e[o],n,i)}d.param=function(t,e){var n,i=[],o=function(t,e){e=d.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=d.ajaxSettings&&d.ajaxSettings.traditional),d.isArray(t)||t.jquery&&!d.isPlainObject(t))d.each(t,(function(){o(this.name,this.value)}));else for(n in t)Se(n,t[n],e,o);return i.join("&").replace(we,"+")},d.fn.extend({serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=d.prop(this,"elements");return t?d.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!d(this).is(":disabled")&&Ee.test(this.nodeName)&&!ke.test(t)&&(this.checked||!X.test(t))})).map((function(t,e){var n=d(this).val();return null==n?null:d.isArray(n)?d.map(n,(function(t){return{name:e.name,value:t.replace(Ce,"\r\n")}})):{name:e.name,value:n.replace(Ce,"\r\n")}})).get()}}),d.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ne=d.ajaxSettings.xhr();f.cors=!!Ne&&"withCredentials"in Ne,f.ajax=Ne=!!Ne,d.ajaxTransport((function(e){var n,i;if(f.cors||Ne&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r($e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout((function(){n&&i()}))},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return d.globalEval(t),t}}}),d.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),d.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain)return{send:function(o,r){e=d("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),i.head.appendChild(e[0])},abort:function(){n&&n()}}}));var De=[],Ae=/(=)\?(?=&|$)|\?\?/;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=De.pop()||d.expando+"_"+ae++;return this[t]=!0,t}}),d.ajaxPrefilter("json jsonp",(function(e,n,i){var o,r,s,a=!1!==e.jsonp&&(Ae.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ae.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=d.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ae,"$1"+o):!1!==e.jsonp&&(e.url+=(le.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||d.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always((function(){void 0===r?d(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,De.push(o)),s&&d.isFunction(r)&&r(s[0]),s=r=void 0})),"script"})),d.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||i;var o=C.exec(t),r=!n&&[];return o?[e.createElement(o[1])]:(o=nt([t],e,r),r&&r.length&&d(r).remove(),d.merge([],o.childNodes))};var je=d.fn.load;function Oe(t){return d.isWindow(t)?t:9===t.nodeType&&t.defaultView}d.fn.load=function(t,e,n){if("string"!=typeof t&&je)return je.apply(this,arguments);var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=d.trim(t.slice(a)),t=t.slice(0,a)),d.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&d.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done((function(t){r=arguments,s.html(i?d("<div>").append(d.parseHTML(t)).find(i):t)})).always(n&&function(t,e){s.each((function(){n.apply(this,r||[t.responseText,e,t])}))}),this},d.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){d.fn[e]=function(t){return this.on(e,t)}})),d.expr.filters.animated=function(t){return d.grep(d.timers,(function(e){return t===e.elem})).length},d.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,u=d.css(t,"position"),c=d(t),f={};"static"===u&&(t.style.position="relative"),a=c.offset(),r=d.css(t,"top"),l=d.css(t,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(s=(i=c.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),d.isFunction(e)&&(e=e.call(t,n,d.extend({},a))),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+o),"using"in e?e.using.call(t,f):c.css(f)}},d.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){d.offset.setOffset(this,t,e)}));var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;return r?(e=r.documentElement,d.contains(e,i)?(o=i.getBoundingClientRect(),n=Oe(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o):void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===d.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),d.nodeName(t[0],"html")||(i=t.offset()),i.top+=d.css(t[0],"borderTopWidth",!0),i.left+=d.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-d.css(n,"marginTop",!0),left:e.left-i.left-d.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===d.css(t,"position");)t=t.offsetParent;return t||Dt}))}}),d.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;d.fn[t]=function(i){return I(this,(function(t,i,o){var r=Oe(t);if(void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o}),t,i,arguments.length)}})),d.each(["top","left"],(function(t,e){d.cssHooks[e]=jt(f.pixelPosition,(function(t,n){if(n)return n=At(t,e),St.test(n)?d(t).position()[e]+"px":n}))})),d.each({Height:"height",Width:"width"},(function(t,e){d.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){d.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return I(this,(function(e,n,i){var o;return d.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?d.css(e,n,s):d.style(e,n,i,s)}),e,r?i:void 0,r,null)}}))})),d.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),d.fn.andSelf=d.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],(function(){return d}));var Le=t.jQuery,Ie=t.$;return d.noConflict=function(e){return t.$===d&&(t.$=Ie),e&&t.jQuery===d&&(t.jQuery=Le),d},e||(t.jQuery=t.$=d),d})),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");!function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(t){"use strict";t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",(function(){n=!0}));return setTimeout((function(){n||t(i).trigger(t.support.transition.end)}),e),this},t((function(){t.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})}))}(jQuery),function(t){"use strict";var e='[data-dismiss="alert"]',n=function(n){t(n).on("click",e,this.close)};n.VERSION="3.4.1",n.TRANSITION_DURATION=150,n.prototype.close=function(e){var i=t(this),o=i.attr("data-target");o||(o=(o=i.attr("href"))&&o.replace(/.*(?=#[^\s]*$)/,"")),o="#"===o?[]:o;var r=t(document).find(o);function s(){r.detach().trigger("closed.bs.alert").remove()}e&&e.preventDefault(),r.length||(r=i.closest(".alert")),r.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",s).emulateTransitionEnd(n.TRANSITION_DURATION):s())};var i=t.fn.alert;t.fn.alert=function(e){return this.each((function(){var i=t(this),o=i.data("bs.alert");o||i.data("bs.alert",o=new n(this)),"string"==typeof e&&o[e].call(i)}))},t.fn.alert.Constructor=n,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",e,n.prototype.close)}(jQuery),function(t){"use strict";var e=function(n,i){this.$element=t(n),this.options=t.extend({},e.DEFAULTS,i),this.isLoading=!1};function n(n){return this.each((function(){var i=t(this),o=i.data("bs.button"),r="object"==typeof n&&n;o||i.data("bs.button",o=new e(this,r)),"toggle"==n?o.toggle():n&&o.setState(n)}))}e.VERSION="3.4.1",e.DEFAULTS={loadingText:"loading..."},e.prototype.setState=function(e){var n="disabled",i=this.$element,o=i.is("input")?"val":"html",r=i.data();e+="Text",null==r.resetText&&i.data("resetText",i[o]()),setTimeout(t.proxy((function(){i[o](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))}),this),0)},e.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=n,t.fn.button.Constructor=e,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',(function(e){var i=t(e.target).closest(".btn");n.call(i,"toggle"),t(e.target).is('input[type="radio"], input[type="checkbox"]')||(e.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))})).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',(function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))}))}(jQuery),function(t){"use strict";var e=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};function n(n){return this.each((function(){var i=t(this),o=i.data("bs.carousel"),r=t.extend({},e.DEFAULTS,i.data(),"object"==typeof n&&n),s="string"==typeof n?n:r.slide;o||i.data("bs.carousel",o=new e(this,r)),"number"==typeof n?o.to(n):s?o[s]():r.interval&&o.pause().cycle()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=600,e.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},e.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},e.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},e.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},e.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var i=(n+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(i)},e.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",(function(){e.to(t)})):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},e.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},e.prototype.next=function(){if(!this.sliding)return this.slide("next")},e.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},e.prototype.slide=function(n,i){var o=this.$element.find(".item.active"),r=i||this.getItemForDirection(n,o),s=this.interval,a="next"==n?"left":"right",l=this;if(r.hasClass("active"))return this.sliding=!1;var u=r[0],c=t.Event("slide.bs.carousel",{relatedTarget:u,direction:a});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:u,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(n),"object"==typeof r&&r.length&&r[0].offsetWidth,o.addClass(a),r.addClass(a),o.one("bsTransitionEnd",(function(){r.removeClass([n,a].join(" ")).addClass("active"),o.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout((function(){l.$element.trigger(p)}),0)})).emulateTransitionEnd(e.TRANSITION_DURATION)):(o.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(p)),s&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=n,t.fn.carousel.Constructor=e,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var o=function(e){var i=t(this),o=i.attr("href");o&&(o=o.replace(/.*(?=#[^\s]+$)/,""));var r=i.attr("data-target")||o,s=t(document).find(r);if(s.hasClass("carousel")){var a=t.extend({},s.data(),i.data()),l=i.attr("data-slide-to");l&&(a.interval=!1),n.call(s,a),l&&s.data("bs.carousel").to(l),e.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",o).on("click.bs.carousel.data-api","[data-slide-to]",o),t(window).on("load",(function(){t('[data-ride="carousel"]').each((function(){var e=t(this);n.call(e,e.data())}))}))}(jQuery),function(t){"use strict";var e=function(n,i){this.$element=t(n),this.options=t.extend({},e.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+n.id+'"],[data-toggle="collapse"][data-target="#'+n.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function n(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(document).find(i)}function i(n){return this.each((function(){var i=t(this),o=i.data("bs.collapse"),r=t.extend({},e.DEFAULTS,i.data(),"object"==typeof n&&n);!o&&r.toggle&&/show|hide/.test(n)&&(r.toggle=!1),o||i.data("bs.collapse",o=new e(this,r)),"string"==typeof n&&o[n]()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=350,e.DEFAULTS={toggle:!0},e.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},e.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n,o=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(o&&o.length&&(n=o.data("bs.collapse"))&&n.transitioning)){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){o&&o.length&&(i.call(o,"hide"),n||o.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(e.TRANSITION_DURATION)[s](this.$element[0][l])}}}},e.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var n=t.Event("hide.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var o=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return o.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(o,this)).emulateTransitionEnd(e.TRANSITION_DURATION)}}},e.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},e.prototype.getParent=function(){return t(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy((function(e,i){var o=t(i);this.addAriaAndCollapsedClass(n(o),o)}),this)).end()},e.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var o=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=e,t.fn.collapse.noConflict=function(){return t.fn.collapse=o,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',(function(e){var o=t(this);o.attr("data-target")||e.preventDefault();var r=n(o),s=r.data("bs.collapse")?"toggle":o.data();i.call(r,s)}))}(jQuery),function(t){"use strict";var e='[data-toggle="dropdown"]',n=function(e){t(e).on("click.bs.dropdown",this.toggle)};function i(e){var n=e.attr("data-target");n||(n=(n=e.attr("href"))&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i="#"!==n?t(document).find(n):null;return i&&i.length?i:e.parent()}function o(n){n&&3===n.which||(t(".dropdown-backdrop").remove(),t(e).each((function(){var e=t(this),o=i(e),r={relatedTarget:this};o.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(o[0],n.target)||(o.trigger(n=t.Event("hide.bs.dropdown",r)),n.isDefaultPrevented()||(e.attr("aria-expanded","false"),o.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))})))}n.VERSION="3.4.1",n.prototype.toggle=function(e){var n=t(this);if(!n.is(".disabled, :disabled")){var r=i(n),s=r.hasClass("open");if(o(),!s){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",o);var a={relatedTarget:this};if(r.trigger(e=t.Event("show.bs.dropdown",a)),e.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},n.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var o=t(this);if(n.preventDefault(),n.stopPropagation(),!o.is(".disabled, :disabled")){var r=i(o),s=r.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&r.find(e).trigger("focus"),o.trigger("click");var a=r.find(".dropdown-menu li:not(.disabled):visible a");if(a.length){var l=a.index(n.target);38==n.which&&l>0&&l--,40==n.which&&l<a.length-1&&l++,~l||(l=0),a.eq(l).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=function(e){return this.each((function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new n(this)),"string"==typeof e&&o[e].call(i)}))},t.fn.dropdown.Constructor=n,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",o).on("click.bs.dropdown.data-api",".dropdown form",(function(t){t.stopPropagation()})).on("click.bs.dropdown.data-api",e,n.prototype.toggle).on("keydown.bs.dropdown.data-api",e,n.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",n.prototype.keydown)}(jQuery),function(t){"use strict";var e=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.fixedContent=".navbar-fixed-top, .navbar-fixed-bottom",this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy((function(){this.$element.trigger("loaded.bs.modal")}),this))};function n(n,i){return this.each((function(){var o=t(this),r=o.data("bs.modal"),s=t.extend({},e.DEFAULTS,o.data(),"object"==typeof n&&n);r||o.data("bs.modal",r=new e(this,s)),"string"==typeof n?r[n](i):s.show&&r.show(i)}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=300,e.BACKDROP_TRANSITION_DURATION=150,e.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},e.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},e.prototype.show=function(n){var i=this,o=t.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(o),this.isShown||o.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",(function(){i.$element.one("mouseup.dismiss.bs.modal",(function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)}))})),this.backdrop((function(){var o=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),o&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:n});o?i.$dialog.one("bsTransitionEnd",(function(){i.$element.trigger("focus").trigger(r)})).emulateTransitionEnd(e.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)})))},e.prototype.hide=function(n){n&&n.preventDefault(),n=t.Event("hide.bs.modal"),this.$element.trigger(n),this.isShown&&!n.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(e.TRANSITION_DURATION):this.hideModal())},e.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy((function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")}),this))},e.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy((function(t){27==t.which&&this.hide()}),this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},e.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},e.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop((function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")}))},e.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},e.prototype.backdrop=function(n){var i=this,o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&o;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy((function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())}),this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!n)return;r?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop(),n&&n()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):s()}else n&&n()},e.prototype.handleUpdate=function(){this.adjustDialog()},e.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},e.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},e.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},e.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";var n=this.scrollbarWidth;this.bodyIsOverflowing&&(this.$body.css("padding-right",e+n),t(this.fixedContent).each((function(e,i){var o=i.style.paddingRight,r=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(r)+n+"px")})))},e.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad),t(this.fixedContent).each((function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""}))},e.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=n,t.fn.modal.Constructor=e,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(e){var i=t(this),o=i.attr("href"),r=i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,""),s=t(document).find(r),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(o)&&o},s.data(),i.data());i.is("a")&&e.preventDefault(),s.one("show.bs.modal",(function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",(function(){i.is(":visible")&&i.trigger("focus")}))})),n.call(s,a,this)}))}(jQuery),function(t){"use strict";var e=["sanitize","whiteList","sanitizeFn"],n=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],i={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},o=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,r=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function s(e,i){var s=e.nodeName.toLowerCase();if(-1!==t.inArray(s,i))return-1===t.inArray(s,n)||Boolean(e.nodeValue.match(o)||e.nodeValue.match(r));for(var a=t(i).filter((function(t,e){return e instanceof RegExp})),l=0,u=a.length;l<u;l++)if(s.match(a[l]))return!0;return!1}function a(e,n,i){if(0===e.length)return e;if(i&&"function"==typeof i)return i(e);if(!document.implementation||!document.implementation.createHTMLDocument)return e;var o=document.implementation.createHTMLDocument("sanitization");o.body.innerHTML=e;for(var r=t.map(n,(function(t,e){return e})),a=t(o.body).find("*"),l=0,u=a.length;l<u;l++){var c=a[l],f=c.nodeName.toLowerCase();if(-1!==t.inArray(f,r))for(var p=t.map(c.attributes,(function(t){return t})),d=[].concat(n["*"]||[],n[f]||[]),h=0,g=p.length;h<g;h++)s(p[h],d)||c.removeAttribute(p[h].nodeName);else c.parentNode.removeChild(c)}return o.body.innerHTML}var l=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};l.VERSION="3.4.1",l.TRANSITION_DURATION=150,l.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0},sanitize:!0,sanitizeFn:null,whiteList:i},l.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(document).find(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var o=this.options.trigger.split(" "),r=o.length;r--;){var s=o[r];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},l.prototype.getDefaults=function(){return l.DEFAULTS},l.prototype.getOptions=function(n){var i=this.$element.data();for(var o in i)i.hasOwnProperty(o)&&-1!==t.inArray(o,e)&&delete i[o];return(n=t.extend({},this.getDefaults(),i,n)).delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n.sanitize&&(n.template=a(n.template,n.whiteList,n.sanitizeFn)),n},l.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,(function(t,i){n[t]!=i&&(e[t]=i)})),e},l.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState)n.hoverState="in";else{if(clearTimeout(n.timeout),n.hoverState="in",!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout((function(){"in"==n.hoverState&&n.show()}),n.options.delay.show)}},l.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},l.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue()){if(clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout((function(){"out"==n.hoverState&&n.hide()}),n.options.delay.hide)}},l.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var i=this,o=this.tip(),r=this.getUID(this.type);this.setContent(),o.attr("id",r),this.$element.attr("aria-describedby",r),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,a=/\s?auto?\s?/i,u=a.test(s);u&&(s=s.replace(a,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(t(document).find(this.options.container)):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),f=o[0].offsetWidth,p=o[0].offsetHeight;if(u){var d=s,h=this.getPosition(this.$viewport);s="bottom"==s&&c.bottom+p>h.bottom?"top":"top"==s&&c.top-p<h.top?"bottom":"right"==s&&c.right+f>h.width?"left":"left"==s&&c.left-f<h.left?"right":s,o.removeClass(d).addClass(s)}var g=this.getCalculatedOffset(s,c,f,p);this.applyPlacement(g,s);var m=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",m).emulateTransitionEnd(l.TRANSITION_DURATION):m()}},l.prototype.applyPlacement=function(e,n){var i=this.tip(),o=i[0].offsetWidth,r=i[0].offsetHeight,s=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,u=i[0].offsetHeight;"top"==n&&u!=r&&(e.top=e.top+r-u);var c=this.getViewportAdjustedDelta(n,e,l,u);c.left?e.left+=c.left:e.top+=c.top;var f=/top|bottom/.test(n),p=f?2*c.left-o+l:2*c.top-r+u,d=f?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(p,i[0][d],f)},l.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},l.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();this.options.html?(this.options.sanitize&&(e=a(e,this.options.whiteList,this.options.sanitizeFn)),t.find(".tooltip-inner").html(e)):t.find(".tooltip-inner").text(e),t.removeClass("fade in top bottom left right")},l.prototype.hide=function(e){var n=this,i=t(this.$tip),o=t.Event("hide.bs."+this.type);function r(){"in"!=n.hoverState&&i.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}if(this.$element.trigger(o),!o.isDefaultPrevented())return i.removeClass("in"),t.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",r).emulateTransitionEnd(l.TRANSITION_DURATION):r(),this.hoverState=null,this},l.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},l.prototype.hasContent=function(){return this.getTitle()},l.prototype.getPosition=function(e){var n=(e=e||this.$element)[0],i="BODY"==n.tagName,o=n.getBoundingClientRect();null==o.width&&(o=t.extend({},o,{width:o.right-o.left,height:o.bottom-o.top}));var r=window.SVGElement&&n instanceof window.SVGElement,s=i?{top:0,left:0}:r?null:e.offset(),a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},o,a,l,s)},l.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},l.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+i;a<s.top?o.top=s.top-a:l>s.top+s.height&&(o.top=s.top+s.height-l)}else{var u=e.left-r,c=e.left+r+n;u<s.left?o.left=s.left-u:c>s.right&&(o.left=s.left+s.width-c)}return o},l.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},l.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},l.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},l.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},l.prototype.enable=function(){this.enabled=!0},l.prototype.disable=function(){this.enabled=!1},l.prototype.toggleEnabled=function(){this.enabled=!this.enabled},l.prototype.toggle=function(e){var n=this;e&&((n=t(e.currentTarget).data("bs."+this.type))||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},l.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide((function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null}))},l.prototype.sanitizeHtml=function(t){return a(t,this.options.whiteList,this.options.sanitizeFn)};var u=t.fn.tooltip;t.fn.tooltip=function(e){return this.each((function(){var n=t(this),i=n.data("bs.tooltip"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||n.data("bs.tooltip",i=new l(this,o)),"string"==typeof e&&i[e]())}))},t.fn.tooltip.Constructor=l,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=u,this}}(jQuery),function(t){"use strict";var e=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");e.VERSION="3.4.1",e.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),(e.prototype=t.extend({},t.fn.tooltip.Constructor.prototype)).constructor=e,e.prototype.getDefaults=function(){return e.DEFAULTS},e.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();if(this.options.html){var i=typeof n;this.options.sanitize&&(e=this.sanitizeHtml(e),"string"===i&&(n=this.sanitizeHtml(n))),t.find(".popover-title").html(e),t.find(".popover-content").children().detach().end()["string"===i?"html":"append"](n)}else t.find(".popover-title").text(e),t.find(".popover-content").children().detach().end().text(n);t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},e.prototype.hasContent=function(){return this.getTitle()||this.getContent()},e.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var n=t.fn.popover;t.fn.popover=function(n){return this.each((function(){var i=t(this),o=i.data("bs.popover"),r="object"==typeof n&&n;!o&&/destroy|hide/.test(n)||(o||i.data("bs.popover",o=new e(this,r)),"string"==typeof n&&o[n]())}))},t.fn.popover.Constructor=e,t.fn.popover.noConflict=function(){return t.fn.popover=n,this}}(jQuery),function(t){"use strict";function e(n,i){this.$body=t(document.body),this.$scrollElement=t(n).is(document.body)?t(window):t(n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each((function(){var i=t(this),o=i.data("bs.scrollspy"),r="object"==typeof n&&n;o||i.data("bs.scrollspy",o=new e(this,r)),"string"==typeof n&&o[n]()}))}e.VERSION="3.4.1",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map((function(){var e=t(this),o=e.data("target")||e.attr("href"),r=/^#./.test(o)&&t(o);return r&&r.length&&r.is(":visible")&&[[r[n]().top+i,o]]||null})).sort((function(t,e){return t[0]-e[0]})).each((function(){e.offsets.push(this[0]),e.targets.push(this[1])}))},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),o=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<o[0])return this.activeTarget=null,this.clear();for(t=o.length;t--;)s!=r[t]&&e>=o[t]&&(void 0===o[t+1]||e<o[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",(function(){t('[data-spy="scroll"]').each((function(){var e=t(this);n.call(e,e.data())}))}))}(jQuery),function(t){"use strict";var e=function(e){this.element=t(e)};function n(n){return this.each((function(){var i=t(this),o=i.data("bs.tab");o||i.data("bs.tab",o=new e(this)),"string"==typeof n&&o[n]()}))}e.VERSION="3.4.1",e.TRANSITION_DURATION=150,e.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var o=n.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:o[0]});if(o.trigger(r),e.trigger(s),!s.isDefaultPrevented()&&!r.isDefaultPrevented()){var a=t(document).find(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),(function(){o.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:o[0]})}))}}},e.prototype.activate=function(n,i,o){var r=i.find("> .active"),s=o&&t.support.transition&&(r.length&&r.hasClass("fade")||!!i.find("> .fade").length);function a(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(n[0].offsetWidth,n.addClass("in")):n.removeClass("fade"),n.parent(".dropdown-menu").length&&n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),o&&o()}r.length&&s?r.one("bsTransitionEnd",a).emulateTransitionEnd(e.TRANSITION_DURATION):a(),r.removeClass("in")};var i=t.fn.tab;t.fn.tab=n,t.fn.tab.Constructor=e,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var o=function(e){e.preventDefault(),n.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(jQuery),function(t){"use strict";var e=function(n,i){this.options=t.extend({},e.DEFAULTS,i);var o=this.options.target===e.DEFAULTS.target?t(this.options.target):t(document).find(this.options.target);this.$target=o.on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(n),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function n(n){return this.each((function(){var i=t(this),o=i.data("bs.affix"),r="object"==typeof n&&n;o||i.data("bs.affix",o=new e(this,r)),"string"==typeof n&&o[n]()}))}e.VERSION="3.4.1",e.RESET="affix affix-top affix-bottom",e.DEFAULTS={offset:0,target:window},e.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return o<n&&"top";if("bottom"==this.affixed)return null!=n?!(o+this.unpin<=r.top)&&"bottom":!(o+s<=t-i)&&"bottom";var a=null==this.affixed,l=a?o:r.top;return null!=n&&o<=n?"top":null!=i&&l+(a?s:e)>=t-i&&"bottom"},e.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(e.RESET).addClass("affix");var t=this.$target.scrollTop(),n=this.$element.offset();return this.pinnedOffset=n.top-t},e.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},e.prototype.checkPosition=function(){if(this.$element.is(":visible")){var n=this.$element.height(),i=this.options.offset,o=i.top,r=i.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(r=o=i),"function"==typeof o&&(o=i.top(this.$element)),"function"==typeof r&&(r=i.bottom(this.$element));var a=this.getState(s,n,o,r);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),u=t.Event(l+".bs.affix");if(this.$element.trigger(u),u.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(e.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-n-r})}};var i=t.fn.affix;t.fn.affix=n,t.fn.affix.Constructor=e,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",(function(){t('[data-spy="affix"]').each((function(){var e=t(this),i=e.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),n.call(e,i)}))}))}(jQuery),function(t,e,n){if(t){for(var i,o={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},r={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},s={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},a={option:"alt",command:"meta",return:"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},l=1;l<20;++l)o[111+l]="f"+l;for(l=0;l<=9;++l)o[l+96]=l.toString();g.prototype.bind=function(t,e,n){var i=this;return t=t instanceof Array?t:[t],i._bindMultiple.call(i,t,e,n),i},g.prototype.unbind=function(t,e){return this.bind.call(this,t,(function(){}),e)},g.prototype.trigger=function(t,e){var n=this;return n._directMap[t+":"+e]&&n._directMap[t+":"+e]({},t),n},g.prototype.reset=function(){var t=this;return t._callbacks={},t._directMap={},t},g.prototype.stopCallback=function(t,e){if((" "+e.className+" ").indexOf(" mousetrap ")>-1)return!1;if(h(e,this.target))return!1;if("composedPath"in t&&"function"==typeof t.composedPath){var n=t.composedPath()[0];n!==t.target&&(e=n)}return"INPUT"==e.tagName||"SELECT"==e.tagName||"TEXTAREA"==e.tagName||e.isContentEditable},g.prototype.handleKey=function(){var t=this;return t._handleKey.apply(t,arguments)},g.addKeycodes=function(t){for(var e in t)t.hasOwnProperty(e)&&(o[e]=t[e]);i=null},g.init=function(){var t=g(e);for(var n in t)"_"!==n.charAt(0)&&(g[n]=function(e){return function(){return t[e].apply(t,arguments)}}(n))},g.init(),t.Mousetrap=g,"undefined"!=typeof module&&module.exports&&(module.exports=g),"function"==typeof define&&define.amd&&define((function(){return g}))}function u(t,e,n){t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)}function c(t){if("keypress"==t.type){var e=String.fromCharCode(t.which);return t.shiftKey||(e=e.toLowerCase()),e}return o[t.which]?o[t.which]:r[t.which]?r[t.which]:String.fromCharCode(t.which).toLowerCase()}function f(t){return"shift"==t||"ctrl"==t||"alt"==t||"meta"==t}function p(t,e,n){return n||(n=function(){if(!i)for(var t in i={},o)t>95&&t<112||o.hasOwnProperty(t)&&(i[o[t]]=t);return i}()[t]?"keydown":"keypress"),"keypress"==n&&e.length&&(n="keydown"),n}function d(t,e){var n,i,o,r=[];for(n=function(t){return"+"===t?["+"]:(t=t.replace(/\+{2}/g,"+plus")).split("+")}(t),o=0;o<n.length;++o)i=n[o],a[i]&&(i=a[i]),e&&"keypress"!=e&&s[i]&&(i=s[i],r.push("shift")),f(i)&&r.push(i);return{key:i,modifiers:r,action:e=p(i,r,e)}}function h(t,n){return null!==t&&t!==e&&(t===n||h(t.parentNode,n))}function g(t){var n=this;if(t=t||e,!(n instanceof g))return new g(t);n.target=t,n._callbacks={},n._directMap={};var i,o={},r=!1,s=!1,a=!1;function l(t){t=t||{};var e,n=!1;for(e in o)t[e]?n=!0:o[e]=0;n||(a=!1)}function p(t,e,i,r,s,a){var l,u,c,p,d=[],h=i.type;if(!n._callbacks[t])return[];for("keyup"==h&&f(t)&&(e=[t]),l=0;l<n._callbacks[t].length;++l)if(u=n._callbacks[t][l],(r||!u.seq||o[u.seq]==u.level)&&h==u.action&&("keypress"==h&&!i.metaKey&&!i.ctrlKey||(c=e,p=u.modifiers,c.sort().join(",")===p.sort().join(",")))){var g=!r&&u.combo==s,m=r&&u.seq==r&&u.level==a;(g||m)&&n._callbacks[t].splice(l,1),d.push(u)}return d}function h(t,e,i,o){n.stopCallback(e,e.target||e.srcElement,i,o)||!1===t(e,i)&&(function(t){t.preventDefault?t.preventDefault():t.returnValue=!1}(e),function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}(e))}function m(t){"number"!=typeof t.which&&(t.which=t.keyCode);var e=c(t);e&&("keyup"!=t.type||r!==e?n.handleKey(e,function(t){var e=[];return t.shiftKey&&e.push("shift"),t.altKey&&e.push("alt"),t.ctrlKey&&e.push("ctrl"),t.metaKey&&e.push("meta"),e}(t),t):r=!1)}function v(t,e,n,s){function u(e){return function(){a=e,++o[t],clearTimeout(i),i=setTimeout(l,1e3)}}function f(e){h(n,e,t),"keyup"!==s&&(r=c(e)),setTimeout(l,10)}o[t]=0;for(var p=0;p<e.length;++p){var g=p+1===e.length?f:u(s||d(e[p+1]).action);y(e[p],g,s,t,p)}}function y(t,e,i,o,r){n._directMap[t+":"+i]=e;var s,a=(t=t.replace(/\s+/g," ")).split(" ");a.length>1?v(t,a,e,i):(s=d(t,i),n._callbacks[s.key]=n._callbacks[s.key]||[],p(s.key,s.modifiers,{type:s.action},o,t,r),n._callbacks[s.key][o?"unshift":"push"]({callback:e,modifiers:s.modifiers,action:s.action,seq:o,level:r,combo:t}))}n._handleKey=function(t,e,n){var i,o=p(t,e,n),r={},u=0,c=!1;for(i=0;i<o.length;++i)o[i].seq&&(u=Math.max(u,o[i].level));for(i=0;i<o.length;++i)if(o[i].seq){if(o[i].level!=u)continue;c=!0,r[o[i].seq]=1,h(o[i].callback,n,o[i].combo,o[i].seq)}else c||h(o[i].callback,n,o[i].combo);var d="keypress"==n.type&&s;n.type!=a||f(t)||d||l(r),s=c&&"keydown"==n.type},n._bindMultiple=function(t,e,n){for(var i=0;i<t.length;++i)y(t[i],e,n)},u(t,"keypress",m),u(t,"keydown",m),u(t,"keyup",m)}}("undefined"!=typeof window?window:null,"undefined"!=typeof window?document:null),jQuery,console.log("mousetra-by-attribute.js"),$("[data-key-shortcut]").each((function(){var t=$(this);console.log(t);var e=t.attr("data-key-shortcut");console.log("key:"+e),Mousetrap.bind(e,(function(){return console.log(e),console.log("clicked"),t[0].click(),!0}))})),function(t){function e(){t("#id_company").prop("disabled",t("#id_company_empty").is(":checked"))}e(),t("#id_company_empty").change(e)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
