# Generated by Django 3.1.7 on 2021-03-07 17:16
import gc

import django.db.models.deletion
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models
from django.db.migrations.exceptions import BadMigrationError
from django.db.models import Count


def queryset_iterator(queryset, chunksize=10000, key=None):
    key = [key] if isinstance(key, str) else (key or ['pk'])
    counter = 0
    count = chunksize
    all_count = queryset.all().count()
    if all_count == 0:
        return
    while count == chunksize:
        offset = counter - (counter % chunksize)
        count = 0
        for item in queryset.all().order_by(*key)[offset : offset + chunksize]:
            count += 1
            yield item
        counter += count
        print(f"queryset_iterator: offset={counter:8}, all_count={all_count:8}, progress={counter/all_count* 100:6.2f}")
        gc.collect()


def save_company_fk(apps, schema):
    # Company = apps.get_model('company', 'company')
    Product = apps.get_model('product', 'product')
    invalid_products = (
        Product.objects.annotate(no_of_companies=Count('companies'))
        .order_by('no_of_companies')
        .filter(no_of_companies__gt=1)
    )
    if invalid_products:
        raise BadMigrationError(f"Found products that have multiple manufacturers. Products: {invalid_products}")

    invalid_products = []
    for product in queryset_iterator(Product.objects.filter(companies__isnull=False).all()):
        companies = product.companies.all()
        if len(companies) == 1:
            product.company = companies[0]
            product.save()
        elif len(companies) == 0:
            continue
        else:
            invalid_products.append(product)
    if invalid_products:
        raise BadMigrationError(f"Found products that have multiple manufacturers. Products: {invalid_products}")


class Migration(migrations.Migration):

    dependencies = [
        ('company', '0023_auto_20210215_0756'),
        ('product', '0015_remove_product_company'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='company',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='company.company',
                verbose_name='Producent',
            ),
        ),
        migrations.RunPython(save_company_fk),
    ]
